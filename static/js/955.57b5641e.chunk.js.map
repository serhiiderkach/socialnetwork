{"version":3,"file":"static/js/955.57b5641e.chunk.js","mappings":"sMACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA4I,0B,mBCa5I,EAPqC,SAACA,GAElC,OACI,gBAAKC,UAAWC,EAAhB,SAA4BF,EAAMG,SAEzC,E,UCOD,EAVwC,SAACH,GACrC,IAAII,EAAO,YAAcJ,EAAMK,GAE/B,OACI,gBAAKJ,UAAS,UAAKC,EAAL,YAAuBA,GAArC,UACI,SAAC,KAAD,CAASI,GAAIF,EAAb,SAAoBJ,EAAMO,QAGrC,E,SCPD,EARyBC,EAAAA,KAAaC,MAAM,CACxCC,eAAgBF,EAAAA,KAEXG,IAAI,EAAG,oCAEPC,IAAI,GAAI,wBACRC,SAAS,uB,UCyDlB,EA/CqC,SAACb,GAElC,IAAIc,EAAQd,EAAMe,YAEdC,EAAkBF,EAAMG,QAAQC,KAAK,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYZ,KAAMY,EAAEZ,KAAiBF,GAAIc,EAAEd,IAAZc,EAAEd,GAArC,IACtCe,EAAmBN,EAAMO,SAASH,KAAK,SAAAI,GAAC,OAAI,SAAC,EAAD,CAASnB,QAASmB,EAAEnB,SAAcmB,EAAEjB,GAAxC,IAU5C,OACI,iBAAKJ,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKc,KAEL,iBAAKf,UAAWC,EAAhB,WACI,yBAAMkB,KACN,0BACI,SAAC,KAAD,CACIG,cAXoB,CAACb,eAAgB,IAYrCc,SAjBA,SAACC,GACjBzB,EAAM0B,YAAYD,EAAOf,gBACzBiB,QAAQC,IAAIH,EACf,EAemBI,iBAAkBC,EAHtB,SAKK,gBAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,QAAV,OACG,UAAC,KAAD,YACI,0BACI,SAAC,KAAD,CAAOC,KAAM,WAAY1B,KAAM,iBAAkB2B,YAAa,8BAEjEH,EAAOrB,gBAAkBsB,EAAQtB,iBAC9B,iBAAMyB,MAAO,CAACC,MAAO,MAAOC,SAAU,OAAQC,OAAQ,iBAAtD,SAAyEP,EAAOrB,kBACpF,0BACI,mBAAQuB,KAAM,SAAd,sBARX,WAiBxB,E,oBCjDD,GAAeM,E,QAAAA,KACXC,EAAAA,EAAAA,KAPkB,SAAC1B,GACnB,MAAO,CACHC,YAAaD,EAAMC,YAE1B,IAGU,UAAqB0B,EAAAA,IAC5BC,EAAAA,EAFJ,CAGEC,E,mICZEC,EAA6B,SAAC9B,GAAD,MAA0B,CACvD+B,OAAQ/B,EAAMgC,KAAKD,OADU,EAS1B,SAASH,EAAqCK,GAcjD,OAJqCP,EAAAA,EAAAA,IACjCI,EAA4B,CAAC,EADIJ,EARiC,SAACxC,GACnE,IAAK6C,EAAwB7C,EAAxB6C,OAAWG,GAAhB,OAA6BhD,EAA7B,GAEA,OAAK6C,GAEE,SAACE,GAAD,UAAqBC,KAFR,SAAC,KAAD,CAAU1C,GAAG,UAGpC,GAOJ,C","sources":["webpack://react-way-of-samurai/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/FormValidation/dialogFormSchema.ts","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__lgABt\",\"dialogsItems\":\"Dialogs_dialogsItems__uVcGp\",\"active\":\"Dialogs_active__jYZNB\",\"messages\":\"Dialogs_messages__dvpTA\",\"message\":\"Dialogs_message__gzde2\"};","import s from '../Dialogs.module.css';\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={s.dialogs}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (\r\n        <div className={`${s.dialogsItems} ${s.active}`}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import * as Yup from \"yup\";\r\n\r\nconst dialogFormSchema = Yup.object().shape({\r\n    newMessageBody: Yup.string()\r\n        //минимальная длина - 2 символа\r\n        .min(2, 'Must be longer than 2 characters')\r\n        //максимальная длина - 20 символов\r\n        .max(50, 'More than 50 symbols')\r\n        .required('Field is Required'),\r\n});\r\nexport default dialogFormSchema;","import s from './Dialogs.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport React from \"react\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport dialogFormSchema from \"../FormValidation/dialogFormSchema\";\r\nimport {Field, Form, Formik} from \"formik\";\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\ntype initialValuesType = {\r\n    newMessageBody: string\r\n}\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />  );\r\n    let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id} /> );\r\n\r\n\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n        console.log(values)\r\n    }\r\n\r\n    const initialValues:initialValuesType = {newMessageBody: ''}\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <Formik\r\n                        initialValues={initialValues}\r\n                        onSubmit={(addNewMessage)}\r\n                        validationSchema={dialogFormSchema}\r\n                    >\r\n                        {({errors, touched}) => (\r\n                            <Form>\r\n                                <div>\r\n                                    <Field type={'textarea'} name={'newMessageBody'} placeholder={'Enter your message body'}/>\r\n                                </div>\r\n                                {errors.newMessageBody && touched.newMessageBody &&\r\n                                    <span style={{color: 'red', fontSize: '18px', border: '1px solid red'}}>{errors.newMessageBody}</span>}\r\n                                <div>\r\n                                    <button type={'submit'}>Send</button>\r\n                                </div>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,{...actions}),\r\n    withAuthRedirect\r\n)(Dialogs);","import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP extends object>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Navigate to='/login'/>\r\n\r\n        return <WrappedComponent{...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}"],"names":["props","className","s","message","path","id","to","name","Yup","shape","newMessageBody","min","max","required","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","initialValues","onSubmit","values","sendMessage","console","log","validationSchema","dialogFormSchema","errors","touched","type","placeholder","style","color","fontSize","border","compose","connect","actions","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","WrappedComponent","restProps"],"sourceRoot":""}